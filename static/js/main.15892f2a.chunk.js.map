{"version":3,"sources":["components/AppBar.js","components/TodoCard.js","components/TodoInputBox.js","components/theme/myTheme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","react_default","a","createElement","className","AppBar","position","Toolbar","Typography","variant","display","alignItems","width","overflow","margin","concat","padding","paper","button","typography","textAlign","whiteSpace","TodoCard","_ref","onHandleClick","taskString","Paper","Grid","container","wrap","CardActions","disableSpacing","IconButton","onClick","CheckCircle_default","color","item","xs","input","marginLeft","flex","iconButton","divider","height","TodoInputBox","onAddClick","onInputChange","textInput","InputBase","id","multiline","placeholder","onChange","value","Divider","aria-label","AddBox_default","myTheme","createMuiTheme","palette","primary","amber","secondary","blue","type","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoLists","notfication","bind","assertThisInitialized","onDeleteTask","setState","toConsumableArray","event","target","todoIndex","tasks","splice","_this2","todoCardItems","map","todo","push","components_TodoCard","key","Fragment","MuiThemeProvider","components_TodoInputBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15892f2a.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}))\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            やることリスト\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}","import React from \"react\"\r\nimport { CardActions, Typography, Paper, Grid, IconButton } from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport CheckCircle from \"@material-ui/icons/CheckCircle\"\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: 500,\r\n    flexGrow: 1,\r\n    overflow: \"hidden\",\r\n    margin: `${theme.spacing(1)}px auto`,\r\n    padding: theme.spacing(0),\r\n  },\r\n  paper: {\r\n    width: 500,\r\n    margin: theme.spacing(1),\r\n    padding: theme.spacing(1),\r\n  },\r\n  button: {\r\n    padding: `${theme.spacing(2)}px auto`,\r\n    margin: `${theme.spacing(2)}px auto`,\r\n  },\r\n  typography: {\r\n    padding: `${theme.spacing(2)}px auto`,\r\n    margin: `${theme.spacing(2)}px auto`,\r\n    // alignContent: \"center\",\r\n    // display: \"flex\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"pre-line\"\r\n  }\r\n}))\r\n\r\n\r\nconst TodoCard = ({ onHandleClick, taskString }) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container wrap=\"nowrap\" spacing={2}>\r\n          <CardActions disableSpacing>\r\n            <IconButton\r\n              onClick={onHandleClick}\r\n            >\r\n              <CheckCircle color=\"secondary\" />\r\n            </IconButton>\r\n          </CardActions>\r\n          <Grid item xs>\r\n            <Typography\r\n              variant=\"body1\"\r\n              className={classes.typography}>\r\n              {taskString}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoCard","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport AddBox from \"@material-ui/icons/AddBox\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: 500,\r\n    margin: `${theme.spacing(4)}px auto`,\r\n    padding: theme.spacing(2),\r\n  },\r\n  input: {\r\n    marginLeft: 8,\r\n    flex: 1,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  divider: {\r\n    width: 1,\r\n    height: 28,\r\n    margin: 4,\r\n  },\r\n}))\r\n\r\nconst TodoInputBox = ({ onAddClick, onInputChange, textInput }) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <InputBase\r\n        id=\"taskInputBox\"\r\n        multiline\r\n        className={classes.input}\r\n        placeholder=\"忘れないうちに追加しておこう！\"\r\n        onChange={onInputChange}\r\n        value={textInput}\r\n      />\r\n      <Divider className={classes.divider} />\r\n      <IconButton\r\n        color=\"primary\"\r\n        className={classes.iconButton}\r\n        aria-label=\"Directions\"\r\n        onClick={onAddClick}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default TodoInputBox","import { createMuiTheme } from \"@material-ui/core/\"\r\nimport { amber, blue } from \"@material-ui/core/colors\"\r\n\r\nconst myTheme = createMuiTheme({\r\n  palette: {\r\n    primary: amber,\r\n    secondary: blue,\r\n    type: \"light\",\r\n  }\r\n})\r\n\r\nexport default myTheme\r\n","import React, { Component } from \"react\"\r\nimport \"./App.css\"\r\nimport AppBar from \"./components/AppBar\"\r\nimport TodoCard from \"./components/TodoCard\"\r\nimport TodoInputBox from \"./components/TodoInputBox\"\r\nimport { MuiThemeProvider } from \"@material-ui/core/styles\"\r\nimport myTheme from \"./components/theme/myTheme\"\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      input: \"\",\r\n      todoLists: [],\r\n      notfication: false\r\n    }\r\n    this.onAddClick = this.onAddClick.bind(this)\r\n    this.onInputChange = this.onInputChange.bind(this)\r\n    this.onDeleteTask = this.onDeleteTask.bind(this)\r\n  }\r\n\r\n  onAddClick() {\r\n    // 文字が入力されているときに，やることリストを追加する\r\n    if (this.state.input) {\r\n      this.setState({\r\n        todoLists: [...this.state.todoLists, this.state.input],\r\n        input: \"\"\r\n      })\r\n    }\r\n  }\r\n\r\n  onInputChange(event) {\r\n    // 文字列入力イベント時に呼ばれる\r\n    this.setState({\r\n      input: event.target.value\r\n    })\r\n  }\r\n\r\n  onDeleteTask(todoIndex) {\r\n    // チェックマークをクリックしたら，spliceで配列から要素を削除\r\n    this.setState({\r\n      tasks: this.state.todoLists.splice(todoIndex, 1),\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const todoCardItems = []\r\n    this.state.todoLists.map((todo, todoIndex) => {\r\n      return todoCardItems.push(\r\n        <TodoCard\r\n          key={todoIndex}\r\n          taskString={todo}\r\n          onHandleClick={() => { this.onDeleteTask(todoIndex) }}\r\n        />\r\n      )\r\n    })\r\n    return (\r\n      <React.Fragment>\r\n        <MuiThemeProvider theme={myTheme}>\r\n          <AppBar />\r\n          <TodoInputBox\r\n            onAddClick={this.onAddClick}\r\n            onInputChange={this.onInputChange}\r\n            textInput={this.state.input}\r\n          />\r\n          {todoCardItems}\r\n        </MuiThemeProvider>\r\n      </ React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}